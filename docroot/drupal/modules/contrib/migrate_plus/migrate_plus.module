<?php

/**
 * @file
 * Provides enhancements for implementing and managing migrations.
 */

use Drupal\migrate\Entity\MigrationInterface;
use Drupal\migrate_plus\Entity\MigrationGroupInterface;

/**
 * Implements hook_config_schema_info_alter().
 */
function migrate_plus_config_schema_info_alter(&$definitions) {
  // Add a migration_group key to the Migration configuration schema, so
  // migrations can reference their containing group.
  $definitions['migrate.migration.*']['mapping']['migration_group'] =
    array(
      'type' => 'string',
      'label' => 'Group',
    );
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function migrate_plus_migration_load($migrations) {
  /** @var MigrationInterface $migration */
  foreach ($migrations as $migration) {
    // If we are pointing to a valid group, merge its properties into ours.
    if (isset($migration->migration_group)) {
      /** @var MigrationGroupInterface $group */
      $group = entity_load('migration_group', $migration->migration_group);
      if ($group) {
        $shared_configuration = $group->get('shared_configuration');
        if ($shared_configuration) {
          foreach ($shared_configuration as $key => $group_value) {
            $migration_value = $migration->get($key);
            // Where both the migration and the group provide arrays,
            // replace recursively (so each key collision is resolved in favor
            // of the migration).
            if (is_array($migration_value) && is_array($group_value)) {
              $merged_values = array_replace_recursive($group_value, $migration_value);
              $migration->set($key, $merged_values);
            }
            // Where the group provides a value the migration doesn't, use
            // the group value.
            elseif (is_null($migration_value)) {
              $migration->set($key, $group_value);
            }
            // Otherwise, the existing migration value overrides the group
            // value.
          }
        }
      }
    }
  }
}
